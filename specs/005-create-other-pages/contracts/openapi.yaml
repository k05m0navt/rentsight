openapi: 3.0.3
info:
  title: RentSight API - New Pages
  description: API endpoints for Settings, Properties, Help, Reports, and About pages
  version: 1.0.0
  contact:
    name: RentSight Development Team

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://rentsight.app/api
    description: Production server

tags:
  - name: Properties
    description: Property management operations
  - name: User
    description: User profile and preferences
  - name: Reports
    description: Report generation and export
  - name: Help
    description: Help content and search

security:
  - BearerAuth: []

paths:
  # ========================================
  # Properties Endpoints
  # ========================================
  
  /properties:
    get:
      tags: [Properties]
      summary: Get all properties for authenticated user
      description: Returns paginated list of user's properties with optional filtering
      parameters:
        - name: cursor
          in: query
          description: Cursor for pagination (property ID)
          schema:
            type: string
        - name: limit
          in: query
          description: Number of items to return (default 50, max 100)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: search
          in: query
          description: Search term for property name
          schema:
            type: string
      responses:
        '200':
          description: List of properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  nextCursor:
                    type: string
                    nullable: true
                    description: Cursor for next page, null if last page
                  total:
                    type: integer
                    description: Total count of properties
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags: [Properties]
      summary: Create a new property
      description: Creates a new property for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyCreate'
      responses:
        '201':
          description: Property created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Property with same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /properties/{id}:
    get:
      tags: [Properties]
      summary: Get property by ID
      description: Returns a single property by ID (must belong to authenticated user)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Property details
          content:
            application/json:
              schema:
                type: object
                properties:
                  property:
                    $ref: '#/components/schemas/Property'
                  stats:
                    type: object
                    properties:
                      rentEntriesCount:
                        type: integer
                      expenseEntriesCount:
                        type: integer
                      totalIncome:
                        type: number
                      totalExpenses:
                        type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags: [Properties]
      summary: Update property
      description: Updates an existing property (must belong to authenticated user)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdate'
      responses:
        '200':
          description: Property updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Property name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags: [Properties]
      summary: Delete property
      description: Deletes a property (sets property_id to null on associated entries)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Property deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  
  # ========================================
  # User Profile & Preferences Endpoints
  # ========================================
  
  /user/profile:
    get:
      tags: [User]
      summary: Get user profile
      description: Returns authenticated user's profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags: [User]
      summary: Update user profile
      description: Updates authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /user/password:
    put:
      tags: [User]
      summary: Change user password
      description: Changes authenticated user's password (requires current password)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /user/preferences:
    get:
      tags: [User]
      summary: Get user preferences
      description: Returns authenticated user's application preferences
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags: [User]
      summary: Update user preferences
      description: Updates authenticated user's application preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferencesUpdate'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  
  # ========================================
  # Reports Endpoints
  # ========================================
  
  /reports/generate:
    post:
      tags: [Reports]
      summary: Generate report
      description: Generates a report based on specified type and filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  
  /reports/export:
    post:
      tags: [Reports]
      summary: Export report
      description: Exports a report in specified format (PDF, CSV, Excel)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reportType
                - format
              properties:
                reportType:
                  type: string
                  enum: [income_summary, expense_breakdown, tax_report]
                format:
                  type: string
                  enum: [pdf, csv, excel]
                filters:
                  $ref: '#/components/schemas/ReportFilters'
      responses:
        '200':
          description: Report file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  
  # ========================================
  # Help Endpoints
  # ========================================
  
  /help/search:
    get:
      tags: [Help]
      summary: Search help content
      description: Searches help articles and FAQs by query
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: limit
          in: query
          description: Number of results to return (default 10)
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/HelpArticle'
                  faqs:
                    type: array
                    items:
                      $ref: '#/components/schemas/FAQ'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

# ========================================
# Components
# ========================================

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase JWT token from authentication
  
  schemas:
    # Property Schemas
    Property:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 255
        address:
          type: string
          maxLength: 500
          nullable: true
        property_type:
          type: string
          enum: [apartment, house, condo, townhouse, duplex, other]
          nullable: true
        start_date:
          type: string
          format: date
          nullable: true
        notes:
          type: string
          maxLength: 2000
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    PropertyCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        address:
          type: string
          maxLength: 500
        property_type:
          type: string
          enum: [apartment, house, condo, townhouse, duplex, other]
        start_date:
          type: string
          format: date
        notes:
          type: string
          maxLength: 2000
    
    PropertyUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        address:
          type: string
          maxLength: 500
        property_type:
          type: string
          enum: [apartment, house, condo, townhouse, duplex, other]
        start_date:
          type: string
          format: date
        notes:
          type: string
          maxLength: 2000
    
    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    UserProfileUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
    
    UserPreferences:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        currency_format:
          type: string
          example: USD
        date_format:
          type: string
          enum: [MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD]
        language:
          type: string
          example: en
        default_view:
          type: string
          enum: [dashboard, properties, reports, settings]
        theme_preference:
          type: string
          enum: [light, dark, system]
          nullable: true
        preferences:
          type: object
          additionalProperties: true
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    UserPreferencesUpdate:
      type: object
      properties:
        currency_format:
          type: string
        date_format:
          type: string
          enum: [MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD]
        language:
          type: string
        default_view:
          type: string
          enum: [dashboard, properties, reports, settings]
        theme_preference:
          type: string
          enum: [light, dark, system]
        preferences:
          type: object
          additionalProperties: true
    
    # Report Schemas
    ReportRequest:
      type: object
      required:
        - reportType
      properties:
        reportType:
          type: string
          enum: [income_summary, expense_breakdown, tax_report]
        filters:
          $ref: '#/components/schemas/ReportFilters'
    
    ReportFilters:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        propertyId:
          type: string
          format: uuid
        tagIds:
          type: array
          items:
            type: string
            format: uuid
        platform:
          type: string
        category:
          type: string
    
    ReportData:
      type: object
      properties:
        reportType:
          type: string
        generated_at:
          type: string
          format: date-time
        filters:
          $ref: '#/components/schemas/ReportFilters'
        data:
          type: object
          description: Report-specific data structure
          additionalProperties: true
        summary:
          type: object
          properties:
            totalIncome:
              type: number
            totalExpenses:
              type: number
            netIncome:
              type: number
            entryCount:
              type: integer
    
    # Help Schemas
    HelpArticle:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          type: string
        relevance:
          type: number
          description: Search relevance score
    
    FAQ:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        category:
          type: string
        relevance:
          type: number
          description: Search relevance score
    
    # Error Schema
    Error:
      type: object
      properties:
        error:
          type: string
          description: User-friendly error message
        code:
          type: string
          description: Error code for programmatic handling
        details:
          type: object
          additionalProperties: true
          description: Additional error details
  
  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Validation failed
            code: VALIDATION_ERROR
            details:
              field: name
              message: Name is required
    
    Unauthorized:
      description: Authentication required or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Unauthorized
            code: UNAUTHORIZED
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Resource not found
            code: NOT_FOUND
    
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal server error
            code: INTERNAL_ERROR

